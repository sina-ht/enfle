dnl Process this file with autoconf to produce a configure script.
dnl NOTE: autoconf should be 2.49b or later.
dnl       Older autoconf needs some modifications.
dnl
dnl (C)Copyright 1999, 2000, 2001 by Hiroshi Takekawa
dnl This file is part of Enfle.
dnl
dnl Last Modified: Thu Feb 22 03:16:33 2001.
dnl $Id: configure.in,v 1.54 2001/02/21 18:26:19 sian Exp $
dnl
dnl Enfle is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU General Public License version 2 as
dnl published by the Free Software Foundation.
dnl
dnl Enfle is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

AC_INIT(src/enfle.c)

if test "`uname -s`" = "SunOS"; then
  dnl Supress insignificant warnings
  CFLAGS="-Wall -Wno-implicit-int -pipe $CFLAGS"
else
  CFLAGS="-Wall -pipe $CFLAGS"
fi

dnl use enfle-config.h
AM_CONFIG_HEADER(enfle-config.h)

dnl Maintainer mode (uncomment for production release.)
dnl AM_MAINTAINER_MODE

AM_INIT_AUTOMAKE(enfle, 20010222)

AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(no)
AC_CANONICAL_HOST
dnl AC_LIBTOOL_DLOPEN
dnl AC_PROG_LIBTOOL
AM_PROG_LIBTOOL

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_AWK
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S
dnl AC_PROG_RANLIB
dnl These might be commented out if autoconf is older.
dnl AC_PROG_CC_STDC
dnl AC_PROG_GCC_TRADITIONAL

dnl Checks for libraries.
if test -d /usr/local/lib; then
  LDFLAGS="$LDFLAGS -L/usr/local/lib"
  CPPFLAGS="$CPPFLAGS -I/usr/local/include"
fi

available_dlopen=no
AC_CHECK_LIB(dl, dlopen, [ available_dlopen=yes; LIBADD_DLOPEN=-ldl; ], [
  AC_CHECK_LIB(c, dlopen, [ available_dlopen=yes; ]) ])
AM_CONDITIONAL(HAVE_DLOPEN, test "$available_dlopen" = "yes")
AC_SUBST(LIBADD_DLOPEN)

available_jpeg=no
AC_CHECK_HEADER(jpeglib.h, [
  AC_CHECK_LIB(jpeg, jpeg_finish_decompress, [ available_jpeg=yes; LIBADD_JPEG=-ljpeg; ]) ])
AM_CONDITIONAL(HAVE_JPEG, test "$available_jpeg" = "yes")
AC_SUBST(LIBADD_JPEG)

available_mpeg_lib=no
AC_CHECK_HEADER(mpeg.h, [
  AC_CHECK_LIB(mpeg, OpenMPEG, [
    AC_CHECK_LIB(mpeg, OpenMPEGStream, [ available_mpeg_lib=yes; LIBADD_MPEG_LIB=-lmpeg ],
                                       [ AC_MSG_WARN([*** mpeg_lib requires patch.]) ]) ]) ])
AM_CONDITIONAL(HAVE_MPEG_LIB, test "$available_mpeg_lib" = "yes")
AC_SUBST(LIBADD_MPEG_LIB)

available_pthread=no
AC_CHECK_HEADER(pthread.h, [
  AC_CHECK_LIB(pthread, pthread_create, [ available_pthread=yes; LIBADD_PTHREAD=-lpthread; ], [
    AC_CHECK_LIB(c_r, pthread_create, [ available_pthread=yes; LIBADD_PTHREAD=-lc_r; ], [
      AC_CHECK_FUNC(pthread_create, [ available_pthread=yes; ]) ]) ]) ])
if test "$available_pthread" = "yes"; then
  AC_DEFINE(USE_PTHREAD,,[ Define if you have libpthread ])
  CFLAGS="$CFLAGS -D_REENTRANT"
fi
AM_CONDITIONAL(HAVE_PTHREAD, test "$available_pthread" = "yes")
AC_SUBST(LIBADD_PTHREAD)

dnl need checking?
dnl available_pow=no
dnl AC_CHECK_HEADER(math.h, [
dnl   AC_CHECK_LIB(m, pow, [ available_pow=yes; LIBADD_POW=-lm; ]) ])
available_pow=yes
LIBADD_POW=-lm

available_libmpeg3=no
dnl Some libmpeg3 needs -lm
if test "$available_pthread" = "yes"; then
  AC_CHECK_HEADER(mpeg3/libmpeg3.h, [
    AC_CHECK_LIB(mpeg3, mpeg3_open, [
      available_libmpeg3=yes; LIBADD_LIBMPEG3="$LIBADD_POW -lmpeg3 $LIBADD_PTHREAD";
    ], [], [$LIBADD_POW $LIBADD_PTHREAD])
  ], [
    AC_CHECK_HEADER(libmpeg3.h, [
      AC_MSG_WARN([*** please put libmpeg3 headers in include/mpeg3/.])
    ])
  ])
fi
AM_CONDITIONAL(HAVE_LIBMPEG3, test "$available_libmpeg3" = "yes")
AC_SUBST(LIBADD_LIBMPEG3)

dnl available_opendivx=no
dnl if test "$available_pthread" = "yes"; then
dnl   AC_CHECK_HEADER(divx/decore.h, [
dnl     AC_CHECK_LIB(divxdecore, decore, [
dnl       available_opendivx=yes; LIBADD_LIBDIVXDECORE="$LIBADD_POW -ldivxdecore $LIBADD_PTHREAD"; ], [], [$LIBADD_POW $LIBADD_PTHREAD]) ])
dnl fi
dnl AM_CONDITIONAL(HAVE_LIBDIVXDECORE, test "$available_opendivx" = "yes")
dnl LIBADD_DIVXDECORE="$LIBADD_POW $LIBADD_PTHREAD"
dnl AC_SUBST(LIBADD_DIVXDECORE)

available_zlib=no
AC_CHECK_HEADER(zlib.h, [
  AC_CHECK_LIB(z, gzseek, [ available_zlib=yes; LIBADD_ZLIB=-lz; ]) ])
AM_CONDITIONAL(HAVE_ZLIB, test "$available_zlib" = "yes")
AC_SUBST(LIBADD_ZLIB)

available_png=no
dnl Some libpng needs -lm
if test "$available_zlib" = "yes"; then
  LIBADD_PNG=$LIBADD_ZLIB
  AC_CHECK_HEADER(png.h, [
    AC_CHECK_LIB(png, png_get_IHDR, [
      available_png=yes; LIBADD_PNG="$LIBADD_POW $LIBADD_PNG -lpng";
    ], [], [$LIBADD_POW $LIBADD_ZLIB])
  ])
fi
AM_CONDITIONAL(HAVE_PNG, test "$available_png" = "yes")
AC_SUBST(LIBADD_PNG)

available_mng=no
if test "$available_zlib" = "yes" -a "$available_jpeg" = "yes"; then
  LIBADD_MNG="-lz -ljpeg"
  AC_CHECK_HEADER(libmng.h, [
    AC_CHECK_LIB(mng, mng_initialize, [ available_mng=yes; LIBADD_MNG="$LIBADD_MNG -lmng"; ], [], $LIBADD_MNG )])
else
  AC_MSG_WARN([*** mng requires libz and libjpeg.])
fi
AM_CONDITIONAL(HAVE_MNG, test "$available_mng" = "yes")
AC_SUBST(LIBADD_MNG)

available_avifile=no
AC_ARG_WITH(avifile,
        [  --with-avifile-path     specify avifile path (or auto detect).],
        [ with_avifile=$withval ],
        [ with_avifile=yes ])
if test "$with_avifile" = "yes"; then
  for i in /usr/local/include /usr/include; do
    if test -d "$i/avifile"; then
      INCLUDEADD_AVIFILE="-I$i/avifile -I$i/avifile/wine"
    fi
  done
else
  if test -d "$with_avifile"; then
    INCLUDEADD_AVIFILE="-I$with_avifile -I$with_avifile/wine"
  fi
fi

CPPFLAGS_SAVE=$CPPFLAGS
CPPFLAGS="$INCLUDEADD_AVIFILE $CPPFLAGS"
AC_LANG_CPLUSPLUS
AC_PROG_CXX
AC_CHECK_HEADER(avifile.h, [ available_avifile=yes; LIBADD_AVIFILE="-laviplay" ])
LIBADD_STDCC=-lstdc++
AC_LANG_C
AM_CONDITIONAL(HAVE_AVIFILE, test "$available_avifile" = "yes")
AC_SUBST(LIBADD_AVIFILE)
AC_SUBST(LIBADD_STDCC)
AC_SUBST(INCLUDEADD_AVIFILE)
CPPFLAGS=$CPPFLAGS_SAVE

available_bzlib=no
AC_CHECK_HEADER(bzlib.h, [
  AC_CHECK_LIB(bz2, BZ2_bzopen, [
    available_bzlib=yes; LIBADD_BZLIB="-lbz2"; AC_DEFINE(BZAPI_NEEDS_PREFIX, 1, [Define if your bzlib needs BZ2_ prefix.])
  ], [
    AC_CHECK_LIB(bz2, bzopen, [
      available_bzlib=yes; LIBADD_BZLIB="-lbz2";
    ])
  ])
])
AM_CONDITIONAL(HAVE_BZLIB, test "$available_bzlib" = "yes")
AC_SUBST(LIBADD_BZLIB)

available_oss=no
AC_CHECK_HEADERS(sys/soundcard.h machine/soundcard.h soundcard.h)
if test "${ac_cv_header_soundcard_h}" = "yes" -o \
        "${ac_cv_header_sys_soundcard_h}" = "yes" -o \
        "${ac_cv_header_machine_soundcard_h}" = "yes"; then
  available_oss=yes
fi
AM_CONDITIONAL(HAVE_OSS, test "$available_oss" = "yes")

available_esd=no
AC_CHECK_HEADER(esd.h,
  AC_CHECK_LIB(esd, esd_play_stream_fallback, [ available_esd=yes; LIBADD_ESD="-lesd" ]))
AM_CONDITIONAL(HAVE_ESD, test "$available_esd" = "yes")
AC_SUBST(LIBADD_ESD)

AC_PATH_PROG(nasm_path,nasm)
AC_ARG_ENABLE(nasm,
        [  --enable-nasm           use x86 assembler.],
        [ enable_nasm=$enableval ],
        [ enable_nasm=no ])
use_nasm=no
if test "$enable_nasm" = "yes"; then
  if test "$nasm_path" != ""; then
    AC_DEFINE(WITH_NASM, 1, [Define if you want to use nasm.])
    use_nasm=yes
  else
    AC_MSG_WARN([*** asm requested but assembler nasm not found])
  fi
fi
AM_CONDITIONAL(USE_NASM, test "$use_nasm" = "yes")

dnl AC_ARG_ENABLE(mmx,
dnl        [  --enable-mmx            use MMX instruction.],
dnl        [ enable_mmx=$enableval ],
dnl        [ enable_mmx=no ])
dnl if test "$enable_mmx" = "yes"; then
dnl   AC_DEFINE(USE_MMX, 1,[ Define if you have and use MMX. ])
dnl fi
dnl AM_CONDITIONAL(USE_MMX, test "$enable_mmx" = "yes")

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_STAT
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h getopt.h)

dnl Checks for X libraries.
AC_PATH_XTRA
if test "$x_includes" = ""; then
  # last resort
  x_includes="/usr/X11R6/include"
fi
if test "$X_LIBS" = ""; then
  # last resort
  X_LIBS="-L/usr/X11R6/lib"
fi
CPPFLAGS="$CPPFLAGS -I$x_includes"
LDFLAGS="$LDFLAGS $X_LIBS"

LIBS_BACKUP=$LIBS

LIBS="$X_PRELIBS $LIBS"
AC_CHECK_LIB(X11, XOpenDisplay)
AM_CONDITIONAL(HAVE_X11, test "$have_x" = "yes")

dnl Checks for libraries which require X library.
available_shm=no
AC_CHECK_HEADER(sys/ipc.h,
  AC_CHECK_HEADER(sys/shm.h,
    AC_CHECK_HEADER(X11/extensions/XShm.h,
      AC_CHECK_LIB(Xext, XShmCreateImage, [ available_shm=yes; LIBADD_SHM="-lXext"; ]))))
dnl AM_CONDITIONAL(HAVE_SHM, test "$available_shm" = "yes")
test "$available_shm" = "yes" && AC_DEFINE(USE_SHM,,[ Define if you have MIT Shared Memory extension ])
AC_SUBST(LIBADD_SHM)

available_ungif=no
AC_ARG_WITH(ungif,
        [  --with-ungif            build ungif plugin ],
        [ with_ungif=$withval ],
        [ with_ungif=no ])
if test "$with_ungif" = "yes"; then
  AC_CHECK_HEADER(gif_lib.h,
    AC_CHECK_LIB(ungif, DGifOpen, [ available_ungif=yes; LIBADD_UNGIF=-lungif; ]))
  AC_SUBST(LIBADD_UNGIF)
fi
AM_CONDITIONAL(HAVE_UNGIF, test "$available_ungif" = "yes")

LIBS=$LIBS_BACKUP

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
ENFLE_MAX_ALIGN

dnl Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_STAT
AC_CHECK_FUNCS([gettimeofday memalign select strdup strerror])

dnl debug option
AC_ARG_ENABLE(debug,
        [  --enable-debug          build a debugging version.],
        [ enable_debug=$enableval ],
        [ enable_debug=no ])
test "$enable_debug" = yes && AC_DEFINE(DEBUG, 1, [Define if you want to debug.])

dnl susie plugin support
AC_ARG_ENABLE(spi,
        [  --enable-spi            susie plugin support(i386 or later required).],
        [ enable_spi=$enableval ],
        [ enable_spi=no ])
test "$enable_spi" = yes && AC_DEFINE(USE_SPI, 1, [Define if you want to susie plugin support.])
AM_CONDITIONAL(USE_SPI, test "$enable_spi" = "yes")

dnl data directory path
enfle_datadir=${datadir}/enfle
AC_SUBST(enfle_datadir)

dnl plugin directory path
enfle_plugindir=${libdir}/enfle/plugins
enfle_archiver_plugindir=${enfle_plugindir}/archiver
enfle_audio_plugindir=${enfle_plugindir}/audio
enfle_loader_plugindir=${enfle_plugindir}/loader
enfle_player_plugindir=${enfle_plugindir}/player
enfle_streamer_plugindir=${enfle_plugindir}/streamer
enfle_ui_plugindir=${enfle_plugindir}/ui
enfle_video_plugindir=${enfle_plugindir}/video
AC_SUBST(enfle_plugindir)
AC_SUBST(enfle_archiver_plugindir)
AC_SUBST(enfle_audio_plugindir)
AC_SUBST(enfle_loader_plugindir)
AC_SUBST(enfle_player_plugindir)
AC_SUBST(enfle_streamer_plugindir)
AC_SUBST(enfle_ui_plugindir)
AC_SUBST(enfle_video_plugindir)

dnl with dmalloc
AM_WITH_DMALLOC

dnl more warnings, calm down for production release (comment out)
dnl do not put this line at earlier position to avoid confusing configure script.
CFLAGS="$CFLAGS -Werror -Wstrict-prototypes -Wwrite-strings"

AC_CONFIG_FILES([
 Makefile
  lib/Makefile
   lib/X11/Makefile
   lib/demultiplexer/Makefile
   lib/dllloader/Makefile
   lib/enfle/Makefile
   lib/mpglib/Makefile
   lib/mpeg2/Makefile
   lib/utils/Makefile
  src/Makefile
  plugins/Makefile
   plugins/ui/Makefile
    plugins/ui/normal/Makefile
   plugins/streamer/Makefile
    plugins/streamer/bz2/Makefile
    plugins/streamer/gz/Makefile
   plugins/loader/Makefile
    plugins/loader/bmp/Makefile
    plugins/loader/jpeg/Makefile
    plugins/loader/pcx/Makefile
    plugins/loader/png/Makefile
    plugins/loader/ungif/Makefile
   plugins/archiver/Makefile
    plugins/archiver/tar/Makefile
   plugins/player/Makefile
    plugins/player/avifile/Makefile
    plugins/player/libmpeg2/Makefile
    plugins/player/libmpeg3/Makefile
    plugins/player/mng/Makefile
    plugins/player/mpeg_lib/Makefile
    plugins/player/mpglib/Makefile
    plugins/player/ungif/Makefile
   plugins/video/Makefile
    plugins/video/Xlib/Makefile
   plugins/audio/Makefile
    plugins/audio/esd/Makefile
    plugins/audio/oss/Makefile
])
AC_OUTPUT
